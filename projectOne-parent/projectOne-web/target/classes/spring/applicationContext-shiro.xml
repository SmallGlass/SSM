<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--组件扫描器-->
    <context:component-scan base-package="com.kk.realm" />
    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.kk.realm.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    <!-- Realm实现 -->
    <bean id="loginRealm" class="com.kk.realm.LoginRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>
    <!-- 配置securityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 配置自定义Realm -->
        <!-- 指定Shiro验证用户登录的类为自定义的Realm（若有多个Realm，可用[realms]属性代替） -->
        <!-- loginRealm 使用扫描器扫描注册成功了-->
        <property name="realm" ref="loginRealm" />
        <!-- Shiro默认会使用Servlet容器的Session，此时修改超时时间的话，可以修改web.xml或者自定义的MyRealm
        而若想使用Shiro原生Session则可以设置sessionMode属性为native，此时修改超时时间则只能修改MyRealm
        -->
        <!-- <property name="sessionMode" value="native"/> -->
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <!-- shiro过滤器bean，id要和web.xml中filter-name一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />

        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <!-- <property name="loginUrl" value="/login"></property>-->



        <!--
            用户访问未授权的资源时，所显示的连接
            若想更明显的测试此属性可以修改它的值，比如unauthor.jsp
            然后用[xuanyu]登录后访问/admin/list.jsp就看见浏览器会显示unauthor.jsp
         -->
        <property name="unauthorizedUrl" value="/unauthor.jsp"/>
        <property name="filterChainDefinitions">
            <value>
                #这里相当于ini配置文件中的[urls]
                #url=拦截器[参数]，拦截器
                # /techer/** = authc, perms[document:read]
                # 如果用户没有该角色，然后访问该路径会报401错误

                /admin/** = authc, roles[admin]
                #/techer/** = authc, roles[teacher]
                #/student/** = authc, roles[student]

                # 当访问login时，不用进行认证（anon表示匿名）
                /login = anon
                /unauthor.jsp = anon
                /captcha.jsp =anon
                /foreground/** = anon
                #/logout = logout

                # 配置静态资源可以匿名访问
                /bootstrap/** = anon
                /css/** = anon
                /images/** = anon
                # 除了上面额 /login 可以匿名访问，其他路径都需要登录访问
                # 如果没登录，就访问其他路径会跳转到 /login 登录

                /** = authc
            </value>
        </property>
    </bean>




    <!-- 生命周期 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!--
    开启Shiro的注解（比如@RequiresRoles、@RequiresPermissions）
    配置以下两个bean即可实现此功能（其需借助SpringAOP扫描使用Shiro注解的类，并在必要时进行安全逻辑验证）
    并且：Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run
    说明：本例并未使用Shiro注解，个人觉得将权限通过注解的方式硬编码在程序中，查看起来不是很方便
    -->
    <!-- 启用shiro注解 -->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>-->


</beans>